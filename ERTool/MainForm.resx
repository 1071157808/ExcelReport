<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAOwGAADsBgAAAAAAAAAA
        AAAAAAAAAAAAAQAAAAoAAAAXAAAAHQAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAA
        AB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAdAAAAFwAA
        AAoAAAABAAAAAAAAAAAAAAAPAgEBQwkGBHUNCQaJDgkGig4KB4kPCwiJDwsIiRcTD4kZFA+JGRQPiRkU
        D4kZFRCJGhUQiRoVEYkaFRGJGhUQiRkVEIkZFA+JGRQPiRgTDokYEw6JGBINiRcSDYkXEQyJFxELihYQ
        C4kPDAd1AwMCQwAAAA8AAAAAAAAABQEBADcdEgqoOCIT60IoF/hEKhn5RSsb+UctHPlGLR35Zk07+X1f
        Q/l7XD75fF0/+X1eQfl+X0P5f2BE+X9gRPl+X0P5fV5B+XxdP/l7XD75elo9+XlZO/l4WDr5d1c4+XZW
        N/l1VDX5dFMz+GNHLOs0JReoAgEBNwAAAAUAAAAJDAcEVjoiEuNFJxL/RCUR/0QlEf9EJRH/RCUR/0Ql
        Ef9OMh7/f14+/3xWMv98VjL/fFUy/3xVMv98VTL/fFUy/3xVMv98VTL/fFYy/3xWMv98VjL/fFYy/3xW
        Mv98VjL/fFYy/3xWMv98VjL/fVcz/2dIK+MVDwlWAAAACQAAAAoTCwZdRScT80gnEv9IJxL/SCcS/0gn
        Ev9IJxL/RycS/0cpFP9uUDX/gls3/39XMv9/WDL/f1gy/39YMv9/WDL/f1gy/39YMv9/WDL/f1gy/39Y
        Mv9/WDL/f1gy/39YMv9/WDL/f1gy/39YMv9/WDL/eVUx8yAXDl0AAAAKAAAAChQMBl1IKRTzSykT/0op
        E/9KKRP/SikT/0opE/9KKRP/SCgS/1w/KP+GYDz/gloz/4NaNP+DWjT/g1o0/4NaNP+DWjT/g1o0/4Na
        NP+DWjT/g1o0/4NaNP+DWjT/g1o0/4NaNP+DWjT/g1o0/4NbNP99VzLzIhgOXQAAAAoAAAAKFQwGXEsq
        FPNOKxP/TisT/04rE/9OKxP/TisT/04rE/9MKhL/VDcg/4BcOf+HXTX/hl00/4ZdNP+GXTT/hl00/4Zd
        NP+GXTT/hl00/4ZdNP+GXTT/hl00/4ZdNP+GXTT/hl00/4ZdNP+GXTT/h100/4FZM/MjGA5cAAAACgAA
        AAkWDQZbTiwU8lItFP9RLRT/US0U/1EtFP9RLRT/Ui0U/1EtE/9QMRn/fFg4/4xhOP+KXzb/il82/4pf
        Nv+KXzb/il82/4pfNv+KXzb/il82/4pfNv+KXzb/il82/4pfNv+KXzb/il82/4pfNv+KXzb/hFs08iQZ
        D1sAAAAJAAAACRcNBlpRLhXyVS8V/1UvFf9VLxX/VS8V/1UvFf9VLxX/VS8V/04sFf95Vjb/kGQ6/41h
        N/+NYTf/jWE3/41hN/+NYTf/jWE3/41hN/+NYTf/jWE3/41hN/+NYTf/jWE3/41hN/+NYTf/jWE3/45h
        N/+HXTXyJRoPWgAAAAkAAAAJGA0GWVQvFfJYMRb/WDEW/1gxFv9YMRb/WDEW/1gxFv9ZMRb/TisT/3lU
        Nf+UZjv/kWM4/5FjOP+RYzj/kWM4/5FjOP+RYzj/kWM4/5FjOP+RYzj/kWM4/5FjOP+RYzj/kWM4/5Fj
        OP+RYzj/kWQ4/4tfNfInGw9ZAAAACQAAAAkZDgZYWDEW8lwzF/9cMxf/XDMX/1wzF/9cMxf/XDMX/1wz
        F/9RLRT/fFc1/5hpPP+UZjn/lWY5/5VmOf+VZjn/lWY5/5VmOf+VZjn/lWY5/5VmOf+VZjn/lWY5/5Vm
        Of+VZjn/lWY5/5VmOf+VZjn/jmE38igcD1gAAAAJAAAACRoPB1dbNBjyXzUY/141GP9eNRj/XjUY/141
        GP9eNRj/XzUY/1MvFf9/WDX/m2s8/5hoOv+YaDr/mGg6/5hoOv+YaDr/mGg6/5hoOv+YaDr/mGg6/5ho
        Ov+YaDr/mGg6/5hoOv+YaDr/mGg6/5hoOv+SZDjyKh0QVwAAAAkAAAAIHBAIV183GvJiNxj/YjcY/2I3
        GP9iNxj/YjcY/2I3GP9hNxj/VTEY/4NZNP+ebDz/nGo7/5xrO/+cazv/nGs7/5xrO/+cazv/nGs7/5xr
        O/+cazv/nGs7/5xrO/+cazv/nGs7/5xrO/+cazv/nGs7/5ZnOvIrHhFXAAAACAAAAAgeEglVYTgb8l0y
        Ff9hNRb/ZTkZ/2Y5Gf9mORn/ZjkZ/2M3GP9ZNhv/il41/6FuPP+gbTz/oG08/6BtPP+gbTz/oG08/6Bt
        PP+gbTz/oG08/6BtPP+gbTz/oG08/6BtPP+gbTz/oG08/6BtPP+gbTz/mmo88i0gElUAAAAIAAAACCAT
        ClRgOBvxcVQ//29QO/9bMxb/ZDgY/2g6Gv9pOxr/ZDgZ/2A8IP+XaDv/pHA9/6RvPf+kbz3/o288/6Nv
        Pf+jbz3/o289/6NvPf+jbz3/o289/6NvPf+jbz3/o289/6NvPf+jbz3/o289/6RvPf+fbj7xLyEUVAAA
        AAgAAAAIIRQLVGg9HvGQc17/z8fA/6GPgf9pSjP/Xzgc/2A1Fv9dMxX/aEMk/6NwPv+jbjv/oGs5/5hn
        N/+SZTr/mGg5/6VxPf+ncT7/p3E+/6dxPv+ncT7/p3E+/6dxPv+ncT7/p3E+/6dxPv+ncT7/p3I+/6Jx
        QPExIhVUAAAACAAAAAgiFgxTb0Ii8W5AH/+ihnP/7OXg/+LZ0f+rmov/g2lV/25SPv9yVjz/kmpD/5Ru
        SP+ZdVH/ooNl/7uihv+gflz/nmo6/6p0P/+qdD//qnQ//6p0P/+qdD//qnQ//6p0P/+qdD//qnQ//6p0
        P/+rdD//pnND8TIkFlMAAAAIAAAACCUXDVFzRSTxckAc/3BBHv+ae2X/6uLc//358//16+D/39PF/9XF
        tP/TwKz/2MWv/+HNtv/x3cT/+OHG/9a9of+ackr/pW87/652QP+udkD/rnZA/652QP+udkD/rnZA/652
        QP+udkD/rnZA/652QP+qdkTxNSYXUQAAAAgAAAAHJhkPUHdIJvF2Qx3/dUId/3NBHP+IYEP/vqmZ/+Xc
        1P/79e7///fu//7z5v/98eL//O7e//fp2f/47Nz/9+XP/8ivlP+Zb0b/pnA8/7F4Qf+yeEH/sXhB/7F4
        Qf+xeEH/sXhB/7F4Qf+xeEH/snhB/655RvE3JxhQAAAABwAAAAcoGhBQe0so8XlFHv95RR7/eUUe/3hD
        Hf93RB//h19B/5p/av/Iqo3/0rid/9S6of/KqIf/xJ54/82wlP/169//9+jV/8u0nP+adFD/oG08/651
        Pv+1ekL/tntC/7V7Qv+1e0L/tXpC/7V6Qv+1e0L/snxJ8TgpGVAAAAAHAAAAByobEU9+TSrwfUYf/31G
        H/99Rh//fUYf/31GH/9yPxr/c0kn/7B3QP+4fUT/uH5F/7Z6QP+2eT7/tHtE/82ukP/27eP/+u3f/+XV
        wv+5oIf/nnZQ/6BsOv+tdT7/tHlB/7d8Qv+5fUP/uX1D/7l9Q/+1f0vwOiobTwAAAAcAAAAHKx0SToJQ
        LPCASCD/gEgg/4BIIP+ASCD/gEkg/3VCHf9/Uy//uH1E/71/RP+8f0T/vX9E/72ARP+9f0P/uoBJ/8ii
        fP/s3tD/+/Pr//vy5//i1Mb/v6iS/6aGZv+bcUj/pnVF/7R6Qv+9f0T/vYBE/7mCTPA8KxxOAAAABwAA
        AActHhNNhlMu8IRKIf+DSiH/fUcf/3RBHf99Rh7/dUId/4pcNf++gUb/wIJF/8CCRf/AgkX/voBE/7l9
        Qv+7fkP/vX9D/7+JVf/Sr47/5M+6/+7i1v/x6N//6+HY/+DTxv+/ooT/snpD/8CBRf/AgkX/vYVP8D4t
        HU0AAAAHAAAABzAgFUyKVjDwh0wi/4ZMIf9/SyX/j3Fa/39cQv9qQSH/flQx/7J3P/+4ez//t3o//7F2
        Pf+ncj//nnJH/6VyQP++gEP/xIRF/8GCRP+/gkf/xZFe/8ubbf/MnnH/y5pr/8KJU//BgkX/xIRG/8SE
        Rv/Bh1DwQC8eTAAAAAcAAAAGMiIWSo1ZMfCKTiL/iU4i/4dNIv+ddVj/08S3/8Cypf+bhnT/qolq/6uG
        Yf+qg17/rIpn/8SpjP/iyq7/vp17/6hzQP+/gEP/x4ZH/8iGR//HhUb/xoRE/8aERP/GhEX/x4ZG/8iG
        R//Hhkf/yIZH/8SKUvBCMSBKAAAABgAAAAY0IxdKkVwz8I1QI/+NUCP/jVAj/4pPIv+eclD/2Ma3//Lp
        4f/27eL/7uHT/+vcyv/z49D/8uDK//Ddxv/u2cD/wqWF/6V2SP+xeEH/vH5B/8OCRP/GhUb/yYdI/8uI
        Sf/LiEn/y4hJ/8uISf/LiUn/yI1V8EQyIUoAAAAGAAAABzUlGEmVXjbvkVIk/5FSJP+RUiT/kVIk/49R
        I/+RWC7/l3FT/86zmv/jxKX/4cCe/9mxiv/MlF7/zZpp/+jRt//15dL/4M23/7+kiP+uiGP/rIFW/6x8
        TP+7f0b/zYpJ/86LSf/Oi0n/zotJ/8+LSf/LkFbvRjQiSQAAAAcAAAAFOyodRJliOe+TUyT/lFQl/5RU
        Jf+UVCX/lFQl/5NTJP+LTyP/mmk9/9KQUP/Qi0j/0YxJ/9KNSv/RjEn/0ZZd/9uzi//oz7b/7drH/+bV
        xP/Xw7D/x6mM/8GHT//RjEn/0o1L/9KNS//SjUv/0o1K/8+UWu9MOSdEAAAABQAAAAJAMCUtmmlF0pxd
        Lv+XVib/l1Ym/5dWJv+XVib/l1Ym/5VUJP+PWi//xopR/9eRTP/WkEv/1pBL/9aQS//Vjkr/045K/9ST
        U//RklX/0JNX/9GUV//UlFX/1ZBM/9aPS//WkEv/1pBL/9aQS//XlFP/yZVh0k4+Li0AAAAC////ABgT
        DwyKZEhkp3ZSzK56VOmuelTprnpU6a56VOmuelTpr3tU6aJ1U+nBl3Hp4Kp16d+ncenfp3Hp36dx6d+n
        cenfp3Hp36dx6d+ncOnfp3Dp36dw6d+ncenfp3Hp36dx6d+ncenfqHHp3qdx6dahbsyuhl9kHRgTDP//
        /wAAAAAA////AEc1Kgd2XUsaiW5bIopvXCKKb1wiim9cIopvXCKKb1wigmpZIo56aCKjh20io4ZqIqOG
        aiKjhmoio4ZqIqOGaiKjhmoio4ZqIqOGaiKjhmoio4ZqIqOGaiKjhmoio4ZqIqOGaiKihWkijnNZGlhG
        Mwf///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAgAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACAAAABwAAAA/////8=
</value>
  </data>
</root>